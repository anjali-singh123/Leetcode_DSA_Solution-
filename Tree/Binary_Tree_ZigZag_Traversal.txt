/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void solve(TreeNode* root,vector<vector<int>>& ans){
        stack<TreeNode*>s1;
        stack<TreeNode*>s2;
        vector<int> v;
        if(root == NULL){
            return;
        }
        s1.push(root);
        while(!s1.empty() || !s2.empty()){
            
            while(!s1.empty()){
                TreeNode* temp = s1.top();
                v.push_back(temp->val);
                s1.pop();
                if(temp->left){
                    s2.push(temp->left);
                }
                if(temp->right){
                    s2.push(temp->right);
                }
            }
            if(v.size()>0){
                ans.push_back(v);
            }
            while(v.size()!=0){
                v.pop_back();
            }
            while(!s2.empty()){
                TreeNode* temp1 = s2.top();
                v.push_back(temp1->val);
                s2.pop();
                if(temp1->right){
                    s1.push(temp1->right);
                }
                if(temp1->left){
                    s1.push(temp1->left);
                }
            }
            if(v.size()>0){
                ans.push_back(v);
            }
            
            while(v.size()!=0){
                v.pop_back();
            }
            
        }
        return;
    }
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        vector<vector<int>>ans;
        solve(root,ans);
        return ans;
    }
};
